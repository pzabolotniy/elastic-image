// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import httpclient "github.com/pzabolotniy/elastic-image/internal/httpclient"
import logging "github.com/pzabolotniy/elastic-image/internal/logging"
import mock "github.com/stretchr/testify/mock"

// Browser is an autogenerated mock type for the Browser type
type Browser struct {
	mock.Mock
}

// ExecuteRequest provides a mock function with given fields: method, url
func (_m *Browser) ExecuteRequest(method string, url string) (httpclient.Responser, error) {
	ret := _m.Called(method, url)

	var r0 httpclient.Responser
	if rf, ok := ret.Get(0).(func(string, string) httpclient.Responser); ok {
		r0 = rf(method, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(httpclient.Responser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(method, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: url
func (_m *Browser) Get(url string) (httpclient.Responser, error) {
	ret := _m.Called(url)

	var r0 httpclient.Responser
	if rf, ok := ret.Get(0).(func(string) httpclient.Responser); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(httpclient.Responser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logger provides a mock function with given fields:
func (_m *Browser) Logger() logging.Logger {
	ret := _m.Called()

	var r0 logging.Logger
	if rf, ok := ret.Get(0).(func() logging.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logging.Logger)
		}
	}

	return r0
}
